# Generated by Django 3.2.11 on 2023-05-22 15:57

from django.db import migrations
from api.cases.enums import AdviceType, CaseTypeEnum

from api.picklists.enums import PickListStatus, PicklistType
from api.teams.enums import TeamIdEnum




def populate_inform_letter_template(apps, schema_editor):

    # Create the template 
    LetterLayout = apps.get_model("letter_layouts", "LetterLayout")
    LetterTemplates = apps.get_model("letter_templates", "LetterTemplate")
  
    inform_letter_layout= LetterLayout(
        name = 'Inform Letter', 
        filename = "inform_letter"
    )
    inform_letter_layout.save()
    
    inform_letter_template = LetterTemplates(
        name = "Inform letter",
        layout = inform_letter_layout,
        visible_to_exporter = True, 
        include_digital_signature = True
    )
 
    
    INFORM_LETTERS = [
        ("Weapons of mass destruction (WMD)", "wmd.txt"),
        ("Military and military", "mam.txt"),
        ("Military and weapons of mass destruction (WMD)", "mwmd.txt"),
    ]
    
    PicklistItem = apps.get_model("picklists", "PicklistItem")
     
    picklist_item_ids = []
    LetterTemplates = apps.get_model("letter_templates", "LetterTemplate")
    
    
    Team = apps.get_model("teams", "Team")
    lu_team = Team.objects.get(pk=TeamIdEnum.LICENSING_UNIT)

    for inform_letter in INFORM_LETTERS:
            name, file_name = inform_letter
            with  open(f"lite_content/lite_api/letter_paragraphs/inform_letter_{file_name}", "r") as f:
                text = f.read()
                pick_list_item = PicklistItem(
                    team=lu_team,
                    name=name,
                    text=text,
                    type=PicklistType.LETTER_PARAGRAPH,
                    status=PickListStatus.ACTIVE,
                )
                pick_list_item.save()
                picklist_item_ids.append(pick_list_item.id)
    

    inform_letter_template.letter_paragraphs.set(picklist_item_ids)
    inform_letter_template.case_types.set([CaseTypeEnum.SIEL.id])
    inform_letter_template.decisions.set([AdviceType.ids[AdviceType.REFUSE]])
    inform_letter_template.save()        


class Migration(migrations.Migration):

    dependencies = [
        ("letter_templates", "0003_populate_seed_data"),
    ]

    operations = [
        migrations.RunPython(populate_inform_letter_template, migrations.RunPython.noop),
    ]
